function [result_for_last1,row]=EMatMHKS(result_for_last1,sub_class_train,test,u,v,p,c,lambda,b,v0,eta)
%output parameters:
%result_for_last1 
%inout paramters：
%sub_class_train  --sub training set
%test  --test set which is generated by dataset_for_normalize.test
%u  --initial value of left vector
%v  --initial value of right vector
%p  --learning rate
%c  --penalty parameter1
%lambda  --penalty parameter2
%v0  --initial value
%eta  --training threshold 


row=size(result_for_last1,1);
row=row+1;

cluster_info=sub_class_train;

%--------------------------------------------------------------------------
% get no. attribute
field_num=size(cluster_info(1,1).class,2)-1;
class_num=size(cluster_info,2);
d1_for_use=zeros(1,1);d2_for_use=zeros(1,1);
d_num=1;
for i_num=1:field_num
    if field_num/i_num-fix(field_num/i_num)==0
        
            d1_for_use(d_num)=i_num;
            d2_for_use(d_num)=field_num/i_num;
            d_num=d_num+1;
       
    end
end


%do training and test with the same parameters and different dimension combinations
for d_d_num=1:size(d1_for_use,2)
    tic;
    %get d1 and d2
    d1=d1_for_use(d_d_num);
    d2=d2_for_use(d_d_num);
    %training of classifier
    classifier_info=cell(class_num,class_num);
    class_cluster=cell(1,class_num);
    
    for class_order=1:class_num
        cluster1=(cluster_info(1,class_order).class(:,1:field_num));
            cluster_for_matrix_sub_class=cell(1,1);
            %matrixized for all samples
            clsuter_for_matrix=cell(1,1);
            for cluster_order=1:size(cluster1,1)
                A=reshape(cluster1(cluster_order,:),d1,d2);
                clsuter_for_matrix{cluster_order,1}=A;
            end
            mean_sample=mean(cluster1);
            mean_sample_matrix=reshape(mean_sample,d1,d2);
            cluster_for_matrix_sub_class{1,1}=clsuter_for_matrix;
            cluster_for_matrix_sub_class{1,2}=mean_sample_matrix;%mean of sampls
            cluster_for_matrix_sub_class{1,3}=(cluster_info(1,class_order).class(1,1+field_num));%real class label
        class_cluster{1,class_order}.cluster=cluster_for_matrix_sub_class;
    end
    %extract info of sub class of two classes for the training of classifier
    for k=1:class_num-1
        for j=k+1:class_num
            cluster_k=class_cluster{1,k}.cluster;
            cluster_j=class_cluster{1,j}.cluster;
            border=cell(1,3);
            [u_border,v_border,v0,times_for_train]=trainmethod(cluster_k,cluster_j,c,b,u,v,p,d1,d2,lambda,eta,v0);%求解分类机,且u_border为d1*1的向量，v_border为d2*1的向量,v0是阈值，[v_border,v0]形成了v，v是用来简化目标函数的
            border{1,1}=u_border;
            border{1,2}=v_border;
            border{1,3}=v0;
            classifier_info{k,j}=border;
        end
    end
    %matrixized test samples
    [Mat_Test]=matrixlize_for_test(test,field_num,d1,d2);
    for num_test=1:size(Mat_Test,1)-1%test for each test sample
        %set a voting machine to record the vote results for each classifier in terms of a test sample
        vote=zeros(class_num,2);
        for vote_num=1:size(vote,1)
            vote(vote_num,1)=vote_num;
        end
        %test
        %extract a test sample
        temp_test_sample=Mat_Test{num_test+1,1};
        for k=1:class_num-1
            for j=k+1:class_num
                border=classifier_info{k,j};%extract info of border
                %get the result for function
                u_border_for_test=border{1,1};
                v_border_for_test=border{1,2};
                v0=border{1,3};
                result=u_border_for_test'*(temp_test_sample)*v_border_for_test+v0;
                
                %vote start
                if result>=0
                    vote(k,2)=vote(k,2)+1;
                else
                    vote(j,2)=vote(j,2)+1;
                end
                
            end
        end
        
        vote=sortrows(vote,2);
        for num_order=1:class_num
            if num_order==vote(size(vote,1),1)%get the test class label
                %get the real class label
                testclass=test(1,num_order).class(1,size(test(1,num_order).class,2));
                Mat_Test{num_test+1,3}=testclass;
                break;
            end
        end
    end
    %compute the test results 
    wrong_num=0;
    for wrong_num1=1:size(Mat_Test,1)-1
        if Mat_Test{wrong_num1+1,2}~=Mat_Test{wrong_num1+1,3}
            wrong_num=wrong_num+1;
        end
    end
    
    toc;
    time=toc;
    %store results in result_for_last1

    result_for_last1{row,4}=field_num;
    result_for_last1{row,5}=class_num;
    
    
    result_for_last1{row,8}=c;
    result_for_last1{row,9}=u;
    result_for_last1{row,10}=v;
    result_for_last1{row,11}=b;
    result_for_last1{row,12}=p;
    result_for_last1{row,13}=lambda;
    result_for_last1{row,14}=d1;
    result_for_last1{row,15}=d2;
    result_for_last1{row,16}=wrong_num;
    result_for_last1{row,17}=1-wrong_num/(size(Mat_Test,1)-1);
    result_for_last1{row,18}=time;
    result_for_last1{row,20}=classifier_info;
    result_for_last1{row,21}=cluster_info;
    result_for_last1{row,22}=times_for_train-1;
    row=row+1;
end